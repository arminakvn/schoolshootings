// Generated by CoffeeScript 1.7.1
(function() {


    var margin = {t:20,r:50,b:80,l:50},
        width = $('.canvas').width() - margin.l - margin.r,
        height = $('.canvas').height() - margin.t - margin.b;


    var svg = d3.select('.canvas')
        .append('svg')
        .attr('width', width + margin.l + margin.r)
        .attr('height', height + margin.t + margin.b)
        .append('g')
        .attr('transform',"translate("+margin.l+","+margin.t+")");

    var months = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

    var eventData, dateScale, sliderScale, slider;
    var currentFrame = 0,
        interval, frameLength = 500,
        isPlaying = false;

    var sliderMargin = 65;


    var parseDate = d3.time.format("%m/%d/%y").parse;
//----------------------------------------------------------------------above is the global variable so that you can use it in multiple functions
    var scales= {};
    scales.r = d3.scale.sqrt().domain([0, 70]).range([0,17]);
    scales.x = d3.time.scale().range([0, width]);
    scales.y = d3.scale.linear().domain([0, 75]).range([height, 0]);

//----------------------------------------------------------------------

    var xAxis = d3.svg.axis()
        .scale(scales.x)
        .orient('bottom')
        .tickSize(-height, 0)
        .orient("bottom")
        .tickSubdivide(true)



    var yAxis = d3.svg.axis()
        .scale(scales.y)
        .tickSize(-width, 0)
        .orient("left");

    var line = d3.svg.line()
        .x(function(d){ return scales.x(d.date); })
        .y(function(d){ return scales.y(d.totalVictims); })

//----------------------------------------------------------------------

    queue()

        .defer(d3.json, "data/us-10m.json")
        .defer(d3.csv, "data/MSA_Stanford_Complete_Database.csv", function(d){
            return {
                totalVictims: (+d["Total Number of Victims"] == " " ? undefined: +d["Total Number of Victims"]),
                kill: (+d["Number of Victim Fatalities"] == " " ? undefined: +d["Number of Victim Fatalities"]),
                wound: (+d["Number of Victims Injured"] == " " ? undefined: +d["Number of Victims Injured"]),
                id: +d["CaseID"],
                shooterAge: (+d["Average Shooter Age"] == " " ? undefined: +d["Average Shooter Age"]),
                shooterSex: (d["Shooter Sex"] == " " ? undefined: d["Shooter Sex"]),
                shooterRace: (d["Shooter Race"] == " " ? undefined: d["Shooter Race"]),
                typeOfGun: (d["Type of Gun – General"] == " " ? undefined: d["Type of Gun – General"]),
                numberOfGuns: (+d["Total Number of Guns"] == " " ? undefined: +d["Total Number of Guns"]),
                fateOfShooter: (d["Fate of Shooter"] == " " ? undefined: d["Fate of Shooter"]),
                mentalIllness: (d["History of Mental Illness - General"] == " " ? undefined: d["History of Mental Illness - General"]),
                schoolRelated: (d["School Related"] == " " ? undefined: d["School Related"]),
                placeType: (d["Place Type"] == " " ? undefined: d["Place Type"]),
                description: (d["Description"] == " " ? undefined: d["Description"]),
                lat: (+d["lat"] == " " ? undefined: +d["lat"]),
                lng: (+d["lng"] == " " ? undefined: +d["lng"]),
                lngLat: [+d["lng"], +d["lat"]],
                date: (d["Date"])
            }
        })
        .await(dataLoaded);

//----------------------------------------------------------------------below is when i say the global = the parses data
    function dataLoaded(err, us, data) {
        if (err) console.error(err);

        eventData = data;

        eventData.forEach(function(d) {
            var date = new Date(d.date);
            d.date = date;
        });


        console.log("right after event data",eventData);
        console.log(d3.time.format("%m/%d/%Y"));

        scales.x.domain(d3.extent(eventData, function(d){return d.date; }));


        var minDate = eventData[0].date;
        var maxDate = eventData[eventData.length - 1].date;
        console.log(minDate, maxDate);



        drawTimeSeries(eventData);

    }

createLegend();
createSlider();



//--------------------------line graph function--------------------------------------------
    function drawTimeSeries(eventData) {
            console.log(eventData);

            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0, " + height + ")")
                .call(xAxis)
                .selectAll("text")
                .attr("dy", ".35em")
                .attr("transform", "rotate(45)")
                .style("text-anchor", "start");

            svg.append("g")
                .attr("class", "y axis")
                .call(yAxis);

            var stillPath = svg.append("path")
                .attr("d", line(eventData))
                .attr('fill', 'none')
                .attr('stroke', 'rgb(14, 80, 14')
                .attr('stroke-width', '2')
                .attr("stroke-dashoffset", 0);

        }
//--------------------------
    function animate(){
        interval = setInterval( function(){
            currentFrame++;

            if ( currentFrame == eventData.length ) currentFrame = 0;

            d3.select("#slider-div .d3-slider-handle")
                .style("left", 100*currentFrame/eventData.length + "%" );
            slider.value(currentFrame)

            drawTimeSeries( eventData[ currentFrame ], true );

            if ( currentFrame == eventData.length - 1 ){
                isPlaying = false;
                d3.select("#play").classed("pause",false).attr("title","Play animation");
                clearInterval( interval );
                return;
            }

        },frameLength);
    }
//--------------------------
    function createSlider() {
        sliderScale = d3.scale.linear().domain([0, eventData.length - 1]);
        var val = slider ? slider.value() : 0;
        slider = d3.slider()
            .scale(scales.x)
            .on("slide", function (event, value) {
                if (isPlaying) {
                    clearInterval(interval);
                }
                currentFrame = value;
                drawTimeSeries(eventData[values], d3.event.type != "drag");
            })
            .on("slideend", function () {
                if (isPlaying) animate();
                d3.select("#slider-div").on("mousemove", sliderProbe)
            })
            .on("slidestart", function () {
                d3.select("#slider-div").on("mousemove", null)
            })
            .value(val);

        d3.select("#slider-div").remove();

        d3.select("#slider-container")
            .append("div")
            .attr("id", "slider-div")
            .style("width", scales.x.range()[1] + "px")
            .on("mousemove", sliderProbe)
            .on("mouseout", function () {
                d3.select("#slider-probe").style("display", "none");
            })
            .call(slider);

        d3.select("#slider-div a").on("mousemove", function () {
            d3.event.stopPropagation();
        })
        var sliderAxis = d3.svg.axis()
            .scale( dateScale )
            .tickValues( dateScale.ticks(orderedColumns.length).filter(function(d,i){
                // ticks only for beginning of each year, plus first and last
                return d.getMonth() == 0 || i == 0 || i == orderedColumns.length-1;
            }))
            .tickFormat(function(d){
                // abbreviated year for most, full month/year for the ends
                if ( d.getMonth() == 0 ) return "'" + d.getFullYear().toString().substr(2);
                return months[d.getMonth()] + " " + d.getFullYear();
            })
            .tickSize(10)

        d3.select("#axis").remove();

        d3.select("#slider-container")
            .append("svg")
            .attr("id","axis")
            .attr("width",dateScale.range()[1] + sliderMargin*2 )
            .attr("height",25)
            .append("g")
            .attr("transform","translate(" + (sliderMargin+1) + ",0)")
            .call(sliderAxis);

        d3.select("#axis > g g:first-child text").attr("text-anchor","end").style("text-anchor","end");
        d3.select("#axis > g g:last-of-type text").attr("text-anchor","start").style("text-anchor","start");

    }





}).call(this);

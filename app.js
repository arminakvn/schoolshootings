// Generated by CoffeeScript 1.7.1
(function() {


    var margin = {t:20,r:50,b:80,l:50},
        width = $('.canvas').width() - margin.l - margin.r,
        height = $('.canvas').height() - margin.t - margin.b;


    var svg = d3.select('.canvas')
        .append('svg')
        .attr('width', width + margin.l + margin.r)
        .attr('height', height + margin.t + margin.b)
        .append('g')
        .attr('transform',"translate("+margin.l+","+margin.t+")");

    var eventData;
    var graph;
    var legendFontSize = 12;

    var parseDate = d3.time.format("%m/%d/%y").parse;
//----------------------------------------------------------------------above is the global variable so that you can use it in multiple functions
    var scales= {};
    scales.r = d3.scale.sqrt().domain([0, 70]).range([0,17]);
    scales.x = d3.time.scale().range([0, width]);
    scales.y = d3.scale.linear().domain([0, 75]).range([height, 0]);

//----------------------------------------------------------------------

    var xAxis = d3.svg.axis()
        .scale(scales.x)
        .orient('bottom')
        .tickSize(-height, 0)
        .orient("bottom")
        .tickSubdivide(true)



    var yAxis = d3.svg.axis()
        .scale(scales.y)
        .tickSize(-width, 0)
        .orient("left");

    var line = d3.svg.line()
        .x(function(d){ return scales.x(d.date); })
        .y(function(d){ return scales.y(d.totalVictims); })

//----------------------------------------------------------------------

    queue()

        .defer(d3.json, "data/us-10m.json")
        .defer(d3.csv, "data/MSA_Stanford_Complete_Database.csv", function(d){
            return {
                totalVictims: (+d["Total Number of Victims"] == " " ? undefined: +d["Total Number of Victims"]),
                kill: (+d["Number of Victim Fatalities"] == " " ? undefined: +d["Number of Victim Fatalities"]),
                wound: (+d["Number of Victims Injured"] == " " ? undefined: +d["Number of Victims Injured"]),
                id: +d["CaseID"],
                shooterAge: (+d["Average Shooter Age"] == " " ? undefined: +d["Average Shooter Age"]),
                shooterSex: (d["Shooter Sex"] == " " ? undefined: d["Shooter Sex"]),
                shooterRace: (d["Shooter Race"] == " " ? undefined: d["Shooter Race"]),
                typeOfGun: (d["Type of Gun – General"] == " " ? undefined: d["Type of Gun – General"]),
                numberOfGuns: (+d["Total Number of Guns"] == " " ? undefined: +d["Total Number of Guns"]),
                fateOfShooter: (d["Fate of Shooter"] == " " ? undefined: d["Fate of Shooter"]),
                mentalIllness: (d["History of Mental Illness - General"] == " " ? undefined: d["History of Mental Illness - General"]),
                schoolRelated: (d["School Related"] == " " ? undefined: d["School Related"]),
                placeType: (d["Place Type"] == " " ? undefined: d["Place Type"]),
                description: (d["Description"] == " " ? undefined: d["Description"]),
                lat: (+d["lat"] == " " ? undefined: +d["lat"]),
                lng: (+d["lng"] == " " ? undefined: +d["lng"]),
                lngLat: [+d["lng"], +d["lat"]],
                date: (d["Date"])
            }
        })
        .await(dataLoaded);

//----------------------------------------------------------------------below is when i say the global = the parses data
    function dataLoaded(err, us, data) {
        if (err) console.error(err);

        usTopoJson = us;
        eventData = data;

        eventData.forEach(function(d) {
            var date = new Date(d.date);
            d.date = date;
        });


        console.log("right after event data",eventData);
        console.log(d3.time.format("%m/%d/%Y"));

        scales.x.domain(d3.extent(eventData, function(d){return d.date; }));


        var minDate = eventData[0].date;
        var maxDate = eventData[eventData.length - 1].date;
        console.log(minDate, maxDate);



        drawTimeSeries(eventData);

    }




//--------------------------line graph function--------------------------------------------
    function drawTimeSeries(eventData) {
            console.log(eventData);
            dataEl = d3.selectAll(".timeBar");
            console.log(dataEl)
            dataEl.selectAll("g").append("span").text("2999292929");

        dataEl
                .data(eventData)
                .enter()

                .transition()
                .duration(30000)
                .text( function(d){
                    return d.date
                });
        console.log(dataEl)

            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0, " + height + ")")
                .call(xAxis)
                .selectAll("text")
                .attr("dy", ".35em")
                .attr("transform", "rotate(45)")
                .style("text-anchor", "start");

            svg.append("g")
                .attr("class", "y axis")
                .call(yAxis);

            var stillPath = svg.append("path")
                .attr("d", line(eventData))
                .attr('fill', 'none')
                .attr('stroke', 'rgb(14, 80, 14')
                .attr('stroke-width', '2')
                .attr("stroke-dashoffset", 0);


            var dataPath = svg.append("path")
                .attr("d", line(eventData))
                .attr('fill', 'none')
                .attr('stroke', 'rgb(170, 270, 170')
                .attr('stroke-width', '2')


            var totalLength = dataPath.node().getTotalLength();

            dataPath
                .attr("stroke-dasharray", totalLength + " " + totalLength)
                .attr("stroke-dashoffset", totalLength)
                .transition()
                .duration(30000)
                .ease("linear")
                .attr("stroke-dashoffset", 0);

            var dataPath2 = svg.append("path")
                .attr("d", line(eventData))
                .attr('fill', 'none')
                .attr('stroke', 'rgb(14, 80, 14')
                .attr('stroke-width', '2')

            var totalLength = dataPath2.node().getTotalLength();

            dataPath2
                .attr("stroke-dasharray", totalLength + " " + totalLength)
                .attr("stroke-dashoffset", totalLength)
                .transition()
                .delay(30)
                .duration(30000)
                .ease("linear")
                .attr("stroke-dashoffset", 0);


            var createLegend = function () {


                var legendLabelGroup = dataPath.append("g")
                    .attr("class", "legend")
                    .data(eventData.date)
                    .enter().append("g")
                    .attr("class", "legend");

                legendLabelGroup.append("svg:text")
                    .attr("class", "legend name")
                    .text(function (d) {
                        return d.date;
                    })
                    .attr("font-size", "12px")
                    .attr("fill", "white")


            }
        }





}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var createSlider,
      dataLoaded,
      drawGraph,
      drawTimeSeries,
      eventData,
      graph,
      height,
      height2,
      line,
      map,
      map_el,
      margin,
      margin2,
      parseDate,
      path,
      projection,
      scales,
      svg, svgLine, usTopoJson, width, xAxis, xAxis2, yAxis;

  map_el = $("body").append("<div id='map'></div>");

  L.mapbox.accessToken = "pk.eyJ1IjoiYXJtaW5hdm4iLCJhIjoiSTFteE9EOCJ9.iDzgmNaITa0-q-H_jw1lJw";

  map = L.mapbox.map("map", "arminavn.ib1f592g").setView([40, -74.50], 9);

  margin = {
    t: 20,
    r: 20,
    b: 60,
    l: 20
  };

  margin2 = {
    t: 30,
    r: 100,
    b: 100,
    l: 100
  };

  width = $(".canvas").width() - margin.l - margin.r;
  height = $(".canvas").height() - margin.b - margin.t;
  height2 = margin.b - margin2.t - margin2.b;

  svg = d3.select(".canvas")
      .append("svg")
      .attr("width", width + margin.l + margin.r)
      .attr("height", height + margin.t + margin.b)
      .append("g").attr("transform", "translate(" + margin.l + "," + margin.t + ")");

  graph = d3.select(".lineGraph")
      .append("svg")
      .attr("width", width + margin.l + margin.r)
      .attr("height", height + margin.t + margin.b)
      .append("g").attr("transform", "translate(" + margin.l + "," + margin.t + ")");

  projection = d3.geo.mercator().translate([width / 2, height / 1.5]).scale(200);
  path = d3.geo.path().projection(projection);

  eventData = void 0;
  usTopoJson = void 0;

  parseDate = d3.time.format("%m/%d/%y").parse;

  scales = {};
    scales.cSize = d3.scale.sqrt().domain([0, 100]).range([0, 20]);
    scales.r = d3.scale.sqrt().domain([0, 70]).range([0, 17]);
    scales.x = d3.time.scale().range([0, width / 1.1]).clamp(true);
    scales.x2 = d3.time.scale().range([0, width / 1.7]).clamp(true);
    scales.y = d3.scale.linear().domain([0, 75]).range([height, 0]);

  svgLine = svg.append("g").attr("class", "time-series").attr("transform", "translate(" + margin.l + "," + (margin.t + height + margin2.t) + ")");

  xAxis = d3.svg.axis().scale(scales.x).orient("bottom").tickSize(-height, 0).orient("bottom").tickSubdivide(true);
  yAxis = d3.svg.axis().scale(scales.y).tickSize(-width / 1.7, 0).orient("left");
  xAxis2 = d3.svg.axis().scale(scales.x2).orient("bottom").tickSize(-height, 0).orient("bottom").tickSubdivide(true);

  line = d3.svg.line()
     .x(function(d) {return scales.x2(d.date);})
     .y(function(d) {return scales.y(d.totalVictims);
  });

//----------------------dataLoaded
  dataLoaded = function(err, us, data) {
    var maxDate, minDate;
    if (err) {
      console.error(err);
    }
    usTopoJson = us;
    eventData = data;
    eventData.forEach(function(d) {
      var date;
      date = new Date(d.date);
      d.date = date;
    });
    console.log("right after event data", eventData);
    console.log(d3.time.format("%m/%d/%Y"));

    scales.x2.domain(d3.extent(eventData, function(d) {
      return d.date;
    }));
    scales.x.domain(d3.extent(eventData, function(d) {
      return d.date;
    }));
    minDate = eventData[0].date;
    maxDate = eventData[eventData.length - 1].date;
    console.log(minDate, maxDate);
    drawGraph();
    createSlider(eventData);
  };
//----------------------dataLoadedEnd

  queue().defer(d3.json, "data/us-10m.json").defer(d3.csv, "data/MSA_Stanford_Complete_Database.csv", function(d) {
    return {
      totalVictims: (+d["Total Number of Victims"] === " " ? undefined : +d["Total Number of Victims"]),
      kill: (+d["Number of Victim Fatalities"] === " " ? undefined : +d["Number of Victim Fatalities"]),
      wound: (+d["Number of Victims Injured"] === " " ? undefined : +d["Number of Victims Injured"]),
      id: +d["CaseID"],
      shooterAge: (+d["Average Shooter Age"] === " " ? undefined : +d["Average Shooter Age"]),
      shooterSex: (d["Shooter Sex"] === " " ? undefined : d["Shooter Sex"]),
      shooterRace: (d["Shooter Race"] === " " ? undefined : d["Shooter Race"]),
      typeOfGun: (d["Type of Gun – General"] === " " ? undefined : d["Type of Gun – General"]),
      numberOfGuns: (+d["Total Number of Guns"] === " " ? undefined : +d["Total Number of Guns"]),
      fateOfShooter: (d["Fate of Shooter"] === " " ? undefined : d["Fate of Shooter"]),
      mentalIllness: (d["History of Mental Illness - General"] === " " ? undefined : d["History of Mental Illness - General"]),
      schoolRelated: (d["School Related"] === " " ? undefined : d["School Related"]),
      placeType: (d["Place Type"] === " " ? undefined : d["Place Type"]),
      description: (d["Description"] === " " ? undefined : d["Description"]),
      lat: (+d["lat"] === " " ? undefined : +d["lat"]),
      lng: (+d["lng"] === " " ? undefined : +d["lng"]),
      lngLat: [+d["lng"], +d["lat"]],
      date: d["Date"]
    };
  }).await(dataLoaded);

  createSlider = function(eventData) {
    var brush, brushed, handle, handleSlides, slider;

    brush = d3.svg.brush()
        .x(scales.x).extent([eventData.length, eventData.length])
        .on("brush", brushed);

    slider = svgLine.append("g")
        .attr("class", "slider")
        .call(brush);

    slider.selectAll(".extent, .resize")
        .remove();
    slider.select(".canvas")
        .attr("height", height2);
    handle = slider.append("g")
        .attr("class", "handle");

      handle.append("path")
        .attr("transform", "translate(0," + height2 + ")")
        .datum([[-35, 0], [-35, 22], [35, 22], [35, 0]])
        .attr("d", d3.svg.area());

    handle.append("text")
        .attr("text-anchor", "middle")
        .attr("y", height2);

    hendleSlides = (function(_this) {
      return function() {
        console.log("inside handle slide");
      };
    })(this);

    brushed = (function(_this) {
      return function() {
        var xPos, year;
        year = brush.extent()[0];
        if (d3.event.sourceEvent) {
          year = scales.x.invert(d3.mouse(_this)[0]);
        }
        brush.extent([year, year]);
        xPos = scales.x(year);
        handle.attr("transform", "translate(" + xPos + "0)")
            .select("text")
            .text(year)
            .call(hendleSlides);
      };
    })(this);
    slider.call(brush.event);
  };

  drawGraph = function() {
    var stillPath;
    console.log("eventData", eventData);
    console.log("graph", graph);

    graph.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0, " + height + ")")
        .call(xAxis2).selectAll("text").attr("dy", ".35em")
        .attr("transform", "rotate(45)").style("text-anchor", "start");

    graph.append("g")
        .attr("class", "y axis")
        .call(yAxis);

    stillPath = graph.append("path")
        .attr("d", line(eventData))
        .attr("fill", "none")
        .attr("stroke", "rgb(14, 80, 14")
        .attr("stroke-width", "2")
        .attr("stroke-dashoffset", 0);
  };


}).call(this);
